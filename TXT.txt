https://railway.app/project/c27933fa-a0fe-4d1a-a696-50ed40c7142d


asdasdasdasdasdasdas
1a47e7bc-dbf0-4ea8-88f3-a35b831536cb

IC caballito de batalla/
├── .github/workflows/                
│   └── ci.yml         
├── bin/                 
│   └── www
├── public/              
│   └── stylesheets/     
│       └── style.css             
├── routes/             
│   ├── index.js         
│   └── users.js 
├── utils/              
│   ├── firstTest.js    
│   └── sfirstTest.js    
└── views/               
    ├── <% error.ejs     
    └── <% index.ejs 
├── .dockerignore        
├── .gitignore           
├── Dockerfile           
├── app.js               
├── package-lock.json    
├── package.json         
├── index.test.js        



ci.yml(name: Build and deploy to Production

on:
  push:
    branches:
      - main

jobs:
  run_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js 14   #usar una version 18 en adelante y cambiar el dockerfile a la version
        uses: actions/setup-node@v1
        with:
          node-version: 14.17.0     #usar una version 18 en adelante
      - run: |
          npm install
          npm run test
  docker: 
    name: Build and push on DockerHub
    needs: run_tests
    runs-on: ubuntu-latest
    steps: 
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      -
        name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/myapp:latest
      -
        name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

 #esto aun no funcionara porque usare reywey

  #deploy_to_production:  
  #  name: Deploy to Production
   # needs: docker
    #runs-on: ubuntu-latest
    #steps:
     # - uses: actions/checkout@v2
      #- uses: akhileshns/heroku-deploy@v3.12.12 # This is the action
       # with:
        #  heroku_api_key: ${{secrets.HEROKU_API_KEY}}
         # heroku_app_name: "tp-is-cicd" #Must be unique in Heroku
          #heroku_email: "tomas.ezequiel.rln@gmail.com"
          #usedocker: true)

www(
/**
 * Create HTTP server.
 */


var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
)



style.css(body {
  padding: 50px;
  font: 14px "Lucida Grande", Helvetica, Arial, sans-serif;
}

a {
  color: #00B7FF;
}
)




index.js(var express = require('express');
var router = express.Router();
const ftest = require('../utils/firstTest')

/* GET home page. */
router.get('/', function(req, res, next) {
  res.render('index', { title: 'Express' });
});

router.get('/test', function(req, res){
  const r = ftest()
  res.send({
    test: r 
  })
})

module.exports = router;
)      
 
users.js (var express = require('express');
var router = express.Router();

/* GET users listing. */
router.get('/', function(req, res, next) {
  res.send('respond with a resource');
});

module.exports = router;
)

firstTest.js(const oneTest = require('./oneTest');
function firstTest (){
    return oneTest(4); 
}

module.exports = firstTest; )




sfirstTest.js (const oneTest = require('./oneTest');
function firstTest (){
    return oneTest(4); 
}

module.exports = firstTest; )   






oneTest.js(function oneTest(n){
    if (n % 3 == 0){
        return true
    }
    return false
}

module.exports = oneTest; )



   


 
<%  error.ejs (<h1><%= message %></h1>
<h2><%= error.status %></h2>
<pre><%= error.stack %></pre>)  




<% index.ejs (<!DOCTYPE html>
<html>
  <head>
    <title><%= title %></title>
    <link rel='stylesheet' href='/stylesheets/style.css' />
  </head>
  <body>
    <h1><%= title %></h1>
    <p>Welcome to <%= title %></p>
  </body>
</html>)



dockerignore(node_modules)  

.gitignore  (  node_modules )       

Dockerfile  (FROM node:14.17.0-alpine   

WORKDIR /app

COPY . .

RUN npm install

CMD ["node", "./bin/www"]
)       




app.js    (var createError = require('http-errors');
var express = require('express');
var path = require('path');
var cookieParser = require('cookie-parser');
var logger = require('morgan');

var indexRouter = require('./routes/index');
var usersRouter = require('./routes/users');

var app = express();

// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'ejs');

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

app.use('/', indexRouter);
app.use('/users', usersRouter);
// aca con localhost3000 pones las dos paginas una / y la otra /users
// catch 404 and forward to error handler
app.use(function(req, res, next) {
  next(createError(404));
});

// error handler
app.use(function(err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
});

module.exports = app;
)            


package.json  ({
  "name": "ci-cd",
  "version": "0.0.0",
  "private": true,
  "scripts": {
    "start": "node ./bin/www",
    "test": "jest"      
  },
  "comentario": "estos son los scripts que hay que estudiar y entender, npm run start y npm run test",
  "dependencies": {
    "cookie-parser": "~1.4.4",
    "debug": "~2.6.9",
    "ejs": "~2.6.1",
    "express": "~4.16.1",
    "http-errors": "~1.6.3",
    "morgan": "~1.9.1"
  },
  "devDependencies": {
    "jest": "^27.0.6"
  }
}
)     



index.test.js (const ftest = require('./utils/firstTest') 

describe('initial', () => {
    test('first tests', () => {
      expect(false).toBe(ftest())
    })
}))







name: Build y deploy to Production

on:           # Este bloque define cuándo se ejecuta este flujo de trabajo
  push:       # Se ejecuta cuando hay un push
    branches: # en la rama 'main'
      - main

jobs:                               # Define los trabajos que se ejecutarán
  run_tests:                         # Primer trabajo: ejecutar pruebas
    runs-on: ubuntu-latest            # Usa la última versión de Ubuntu
    steps:                            # Define los pasos del trabajo
      - uses: actions/checkout@v2    # Primer paso: clonar el repositorio
      - name: Use Node.js 18          # Segundo paso: usar Node.js versión 18
        uses: actions/setup-node@v2
        with:
          node-version: 18
      - run: |                       # Tercer paso: instalar dependencias y ejecutar pruebas
          npm install
          npm run test
          
  docker:                                    # Segundo trabajo: construir y subir una imagen Docker
    name: Build and push on DockerHub
    needs: run_tests                         # Este trabajo depende del éxito del trabajo anterior
    runs-on: ubuntu-latest                   # Usa la última versión de Ubuntu
    steps:                                   # Define los pasos del trabajo
      - name: Set up QEMU                    # Configura QEMU para emulación
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx           # Configura Docker Buildx para la construcción avanzada de imágenes
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub             # Inicia sesión en DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # Usa el nombre de usuario guardado en los secretos de GitHub
          password: ${{ docke }} # Usa la contraseña guardada en los secretos de GitHub
      - name: Build and push                       # Construye y sube la imagen Docker
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/myapp:latest # Etiqueta de la imagen en DockerHub
      - name: Image digest                                  # Muestra el digest de la imagen
        run: echo ${{ steps.docker_build.outputs.digest }}

 #esto aun no funcionara porque usare reywey

  #deploy_to_production:  
  #  name: Deploy to Production
   # needs: docker
    #runs-on: ubuntu-latest
    #steps:
     # - uses: actions/checkout@v2
      #- uses: akhileshns/heroku-deploy@v3.12.12 # This is the action
       # with:
        #  heroku_api_key: ${{secrets.HEROKU_API_KEY}}
         # heroku_app_name: "tp-is-cicd" #Must be unique in Heroku
          #heroku_email: "tomas.ezequiel.rln@gmail.com"
          #usedocker: true




          [23:51, 9/6/2024] Lewndro Trompetas Facu: steps:
            - name: Log in to docker hub 
              uses: docker/login-action@v3
              with:
                  username: ${{ secrets.DOCKER_USERNAME}}
                  password: ${{ secrets.DOCKER_PASSWORD}}
        
            - name: build and  Push Docker image
              uses: docker/build-push-action@v3
              with:
                  push: true
                  tags: ${{secrets.DOCKER_USERNAME}}/dracosnape-app:latest
  
            - name: Pull Docker image
              run: docker pull ${{secrets.DOCKER_USERNAME}}/dracosnape-app:latest
              
            - name: Install Railway # 1
              run: npm i -g @railway/cli
            
            - name: Deploy 
              run: railway up --service deploydocker
              env:
                  RAILWAY_TOKEN: ${{ secrets.RAILWAY_DOCKER_PRODUCTION }}

asdasdas
 

name: Deploy on Railway using Docker

on:
  push:
    branches:
      - main
      
jobs:
    build:
      
        runs-on: ubuntu-latest


        steps:
          - name: Log in to docker hub 
            uses: docker/login-action@v3
            with:
                username: ${{ secrets.DOCKER_USERNAME}}
                password: ${{ secrets.DOCKER_PASSWORD}}
      
          - name: build and  Push Docker image
            uses: docker/build-push-action@v3
            with:
                push: true
                tags: ${{secrets.DOCKER_USERNAME}}/caballito:latest

          - name: Pull Docker image
            run: docker pull ${{secrets.DOCKER_USERNAME}}/caballito:latest
            
          - name: Install Railway # 1
            run: npm i -g @railway/cli
          
          - name: Deploy 
            run: railway up --service caballito
            env:
                RAILWAY_TOKEN: ${{ secrets.RAILWAY_DOCKER_PRODUCTION }} asjdasd
                asjdasd

ahashdjasdjahsda no creo que aprube





 
____________________________________________________________________________________________
dockerfile


# Usar una imagen base oficial de Node.js
FROM node:18
# Establecer el directorio de trabajo en /app
WORKDIR /app

# Copiar package.json y package-lock.json
COPY package*.json ./

# Instalar dependencias
RUN npm install

# Copiar el resto de la aplicación
COPY . .

# Exponer el puerto en el que la aplicación va a correr
EXPOSE 3000

# Definir el comando por defecto para correr la aplicación
CMD ["npm", "start"]


____________________________________________________________________________________________
ci.yml

name: Despligue con Railway, la re sufri

on:
  push:
    branches:
      - main
      
jobs:
    build:
      
        runs-on: ubuntu-latest

        steps:
          - name: Checkout code
            uses: actions/checkout@v3
            
          - name: Log in to docker hub 
            uses: docker/login-action@v3
            with:
                username: ${{ secrets.DOCKER_USERNAME}}
                password: ${{ secrets.DOCKER_PASSWORD}}
      
          - name: build and  Push Docker image
            uses: docker/build-push-action@v3
            with:
                push: true
                tags: ${{secrets.DOCKER_USERNAME}}/caballito:latest

          - name: Pull Docker image
            run: docker pull ${{secrets.DOCKER_USERNAME}}/caballito:latest
            
          - name: Install Railway # 1
            run: npm i -g @railway/cli
          
          - name: Deploy 
            run: railway up --service hopeful-gentleness
            env:
                RAILWAY_TOKEN: ${{ secrets.RAILWAY_DOCKER_PRODUCTION }}


____________________________________________________________________________________________
index.js 


var express = require('express'); // Importa el módulo Express
var router = express.Router();    // Crea un enrutador para manejar las rutas
const ftest = require('../utils/firstTest'); // Importa la función firstTest

/* GET home page. */
router.get('/', function(req, res, next) {   // Define la ruta para la página principal
  res.render('index', { title: 'Express' }); // Renderiza la vista 'index' con el título 'Express'
});

router.get('/test', function(req, res) { // Define la ruta para '/test'
  const r = ftest();                     // Llama a la función firstTest
  res.send({
    test: r                              // Envía la respuesta con el resultado de firstTest
  });
});

module.exports = router; // Exporta el enrutador